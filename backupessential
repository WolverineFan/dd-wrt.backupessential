#!/bin/sh
#########################################################
#   Script Requirements
#
#   Files:
#      vars_to_skip
#      vars_preferred
#      vars_to_include
#
#   Programs:
#      curl
#########################################################

#########################################################
# setup variables
#
# DATE          - Date
# MAC           - Mac address
# FILE          - File Name Prefix
# CUR_DIR       - Current Directory
# TRANSFER      - FTP Transfer ON/OFF (Default is OFF)
# FOLDER        - Location where backup scripts are stored
# VARFILE       - Location & Name of Temp File
# TO_ALL        - Location & Name of script File with all nvram variables
# TO_INCLUDE    - Location & Name of script File with essential nvram variables
# TO_EXCLUDE    - Location & Name of script File with dangerous nvram variables
# TO_PREFERRED  - Location & Name of script File with preferred nvram variables
#
# wget -O backupessential https://raw2.github.com/WolverineFan/dd-wrt.backupessential/master/vars_preferred
# wget -O vars_to_skip https://raw2.github.com/WolverineFan/dd-wrt.backupessential/master/vars_to_skip
# wget -O vars_to_include https://raw2.github.com/WolverineFan/dd-wrt.backupessential/master/vars_to_include
# wget -O vars_preferred https://raw2.github.com/WolverineFan/dd-wrt.backupessential/master/vars_preferred
#
#########################################################
export PATH=/opt/bin:/opt/sbin:/opt/usr/sbin:/bin:/usr/bin:/sbin:/usr/sbin:/jffs/sbin:/jffs/bin:/jffs/usr/sbin:/jffs/usr/bin:/mmc/sbin:/mmc/bin:/mmc/usr/sbin:/mmc/usr/bin
commands_exist() { type "$@" >/dev/null 2>&1;}
commands_exist curl && CURL='curl'
[ -z "$CURL" ] && CURL='/opt/bin/curl'

DATE=$(date +%m%d%Y)
MAC=$(nvram get lan_hwaddr | tr -d ":")
FILE=${MAC}.${DATE}
NAME="$0"
commands_exist readlink && NAME="$(readlink -f "${NAME}")"
CUR_DIR=$(dirname "${NAME}")
TRANSFER=0
if [ -d /opt/tmp ]; then
  FOLDER=/opt/var/backups
  VARFILE=/opt/tmp/all_vars
elif [ -d /mmc/jffs ]; then
  FOLDER=/mmc/jffs
  VARFILE=/mmc/jffs/all_vars
else
  FOLDER=/tmp/backups
  VARFILE=/tmp/all_vars
fi

flavours='all essential dangerous preferred minimal'

#########################################################
#FTP Login information change to your info
#########################################################

FTPS=ftp://192.168.10.210/backups
USERPASS=user:pass

#########################################################
# read command line switches
#
#   example command lines
#
#   ./backupessential -t
#
#   The above command with use the user and password and
#   server information embedded in this script.
#   (See FTP Login information above)
#
#
#   ./backupessential -d <backupdir> -t -u user:pass -f ftp://192.168.1.100/backups
#
#   The above command with use the user and password and
#   server information from the command line
#
#########################################################

while getopts tu:f:d: name
do
  case $name in
  t)   TRANSFER=1;;
  u)   USERPASS="$OPTARG";;
  f)   FTPS="$OPTARG";;
  d)   BACKUPDIR="$OPTARG";;
  ?)   printf "Usage: %s: [-t] [-u username:password] [-f ftpserver]\n" "$0"
       exit 2;;
  esac
done
shift $((OPTIND - 1))

if [ -n "${BACKUPDIR}" ]; then
  if [ ! -d "${BACKUPDIR}" ]; then
    echo "ERROR: ${BACKUPDIR} does not exist"
    exit 1
  fi
  FOLDER="${BACKUPDIR}"
  VARFILE="${BACKUPDIR}"/all_vars
else
  mkdir -p "$FOLDER"
  if [ ! -d "$FOLDER" ]; then
    echo "ERROR: Unable to write to $FOLDER"
    exit 1
  fi
fi
TO_ALL="${FOLDER}/${FILE}.all.sh"
TO_INCLUDE="${FOLDER}/${FILE}.essential.sh"
TO_EXCLUDE="${FOLDER}/${FILE}.dangerous.sh"
TO_PREFERRED="${FOLDER}/${FILE}.preferred.sh"
TO_MINIMAL="${FOLDER}/${FILE}.minimal.sh"
SKIP_VARS="${CUR_DIR}/vars_to_skip"
INCL_VARS="${CUR_DIR}/vars_to_include"
PREF_VARS="${CUR_DIR}/vars_preferred"
MIN_VARS="${CUR_DIR}/vars_minimal"

for script in "${SKIP_VARS}" "${INCL_VARS}" "${PREF_VARS}"; do
  if [ ! -f "${script}" ] ; then
    echo "${script} is missing"
    exit 1
  fi
done

min_var_list="cron wan_wins wan_up wl_ssid wl_net_mode wl_channel wl_nm \
              wl_net_mode wl_nband wl_mrate wl0_wds1_ wl0_wds wl0_ssid \
              wl0_wchannel wl0_ssid wl0_phy wl0_net_mode wl0_nctrlsb \
              wl0_nbw wl0_nband wl0_nm wl0_nreqd wk_mode wan_proto \
              wan_hostname wan_dns wan_domain usb_ qos wshaper_uplink \
              wshaper_downlink wshaper_enable wshaper_downlink wshaper_dev \
              svqos_svcs svqos_macs static_lease sshd_enable sshd_wanport \
              sshd_authorized_keys snmpd_ syslogd_enable remote_mgt_ssh \
              remote_management dns_dnsmasq dnsmasq_ dmz_ enable_jffs2 \
              log_ local_dns lan_ipaddr lan_domain rc_ http_wanport \
              http_username http_passwd http_lanport https_enable \
              http_enable fullswitch forwardspec_entries forward_port$ \
              forward_spec forward_entries forward_cur ddns_enable \
              ddns_username ddns_hostname ddns_passwd dhcp_ block_wan"
if [ ! -f "${MIN_VARS}" ] ; then
  for var in $min_var_list ; do
    echo "^${var}" >> "${MIN_VARS}"
  done
fi

for script in "${SKIP_VARS}" "${INCL_VARS}" "${PREF_VARS}" "${MIN_VARS}"; do
  sed -i -e 's/\r//g' -e '/^ *$/d' "${script}"
done

#########################################################
# Create NVRAM variale list and write to /opt/tmp/all_vars
#########################################################

nvram show 2>/dev/null | grep -E '^[A-Za-z][A-Za-z0-9_\.\-]*=' | awk -F= '{print $1}' | sort -ruo "${VARFILE}"

#########################################################
# Write header to restore scripts
#########################################################

for script in "${TO_INCLUDE}" "${TO_EXCLUDE}" "${TO_PREFERRED}" "${TO_MINIMAL}" "${TO_ALL}"; do
  printf '%b\n' "#!/bin/sh\n#\necho \"Write variables\"\n" > "${script}"
done

#########################################################
# Scan NVRAM variable list and send variable to proper
# restore script
#########################################################

while read -r var ; do
  pref=0
  minim=0
  if echo "${var}" | grep -q -f "${SKIP_VARS}" ; then
    bfile="$TO_EXCLUDE"
  else
    bfile="$TO_INCLUDE"
    pref=$(echo "${var}"  | grep -cf "${PREF_VARS}")
    minim=$(echo "${var}" | grep -cf "${MIN_VARS}")
  fi

  # get the data out of the variable
  data="$(nvram get "${var}")"
  # write the var to the file and use \ for special chars: (\$`")
  nvram_str="$(printf '%b' "nvram set ${var}=\""
                printf '%s' "${data}" | sed -e 's/[$`"\]/\\&/g'
                printf '%b\n' "\"")"
  echo "$nvram_str"
  echo "$nvram_str" >> "${bfile}"
  [ "${pref}" -ne 0 ] && echo "$nvram_str" >> "${TO_PREFERRED}"
  [ "${minim}" -ne 0 ] && echo "$nvram_str" >> "${TO_MINIMAL}"
done <"${VARFILE}"

#########################################################
# Cleanup remove /opt/tmp/all_vars
# uncomment to remove file
#########################################################

# rm ${VARFILE}

#########################################################
# Write footer to restore script and
# change permissions to make them executable
#########################################################

for script in "${TO_INCLUDE}" "${TO_EXCLUDE}" "${TO_PREFERRED}" "${TO_MINIMAL}" "${TO_ALL}"; do
  printf '%b\n' "\n# Commit variables\necho \"Save variables to nvram\"\nnvram commit" >> "${script}" &&
  chmod +x "${script}"
done

# Remove the previous backup if it's (almost) the same
if [ -d "${FOLDER}" ] ; then
  temp1='/tmp/chk1'; temp2='/tmp/chk2'
  if commands_exist mktemp; then
    temp1="$(mktemp)" && temp2="$(mktemp)"
  fi
  for flavour in ${flavours} ; do

    echo "Checking ${MAC}.*.${flavour}.sh"

    LAST3=$(ls --color=never -1rt "${FOLDER}"/"${MAC}".*."${flavour}".sh | tail -n3)
    PREVIOUS=$(echo "${LAST3}" | tail -n+2 | head -n1)
    CURRENT=$(echo  "${LAST3}" | tail -n1)

    if [ -n "${PREVIOUS}" ] && [ "${PREVIOUS}" != "${CURRENT}" ]; then
      nvram_grep='nvram set (forward_|traff|dnsmasq_lease_|http_client_)'
      grep -vE "${nvram_grep}" "${PREVIOUS}" >"${temp1}"
      grep -vE "${nvram_grep}" "${CURRENT}" >"${temp2}"
      echo "Comparing ${PREVIOUS} with ${CURRENT}"

      if diff "${temp1}" "${temp2}" >/dev/null 2>&1; then
        echo "Removing ${PREVIOUS} because it's the same as ${CURRENT}"
        rm -f "${PREVIOUS}"
      fi

    fi
  done
  rm -f "${temp1}" "${temp2}"
fi

[ -h /opt/restore ] && rm /opt/restore
ln -s "${TO_MINIMAL}" /opt/restore

#########################################################
# Compress restore scripts and send them to ftp server
#########################################################

if [ "${TRANSFER}" -ne 0 ] ; then
  for script in "${TO_INCLUDE}" "${TO_EXCLUDE}" "${TO_PREFERRED}" "${TO_MINIMAL}" "${TO_ALL}"; do
    out_file="${FTPS}/$(basename "$script").tgz"
    tar cpf - -C / "${script}" 2>/dev/null | gzip -c | "$CURL" -s -u "${USERPASS}" "${out_file}" -T -
  done
fi
